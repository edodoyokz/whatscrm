# Docker Compose untuk Natural AI Assistant dengan integrasi n8n yang sudah ada
# Optimized untuk VPS 1 core 2GB RAM

version: '3.7'

services:
  # Database yang sudah ada (postgres) akan digunakan bersama
  postgres:
    image: postgres:14
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-your_secure_password}
      - POSTGRES_DB=${POSTGRES_DB:-natural_ai_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # n8n yang sudah ada
  n8n:
    image: n8nio/n8n
    restart: always
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n_db}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-postgres}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-your_secure_password}
      - N8N_HOST=${N8N_HOST:-yourdomain.com}
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE:-Asia/Jakarta}
      - WEBHOOK_URL=https://${N8N_HOST:-yourdomain.com}/
    ports:
      - "127.0.0.1:5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres
    networks:
      - app-network

  # Natural AI Assistant
  natural-ai-assistant:
    build: .
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - DB_HOST=postgres
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-your_secure_password}
      - DB_NAME=${POSTGRES_DB:-natural_ai_db}
      - DB_PORT=5432
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your_32_character_key}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/config/google-credentials.json
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - postgres
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis untuk caching (optional, untuk performance)
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Nginx Proxy Manager (sudah ada)
  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: always
    ports:
      - '80:80'    # HTTP Port
      - '443:443'  # HTTPS Port
      - '81:81'    # Admin UI Port
    volumes:
      - npm_data:/data
      - letsencrypt:/etc/letsencrypt
    networks:
      - app-network

volumes:
  postgres_data:
  n8n_data:
  npm_data:
  letsencrypt:
  redis_data:

networks:
  app-network:
    driver: bridge

# Environment file: .env
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=your_secure_password
# POSTGRES_DB=natural_ai_db
# N8N_HOST=yourdomain.com
# GENERIC_TIMEZONE=Asia/Jakarta
# OPENAI_API_KEY=your_openai_key
# GEMINI_API_KEY=your_gemini_key
# ENCRYPTION_KEY=your_32_character_encryption_key
# JWT_SECRET=your_jwt_secret